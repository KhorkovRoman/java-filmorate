CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER AUTO_INCREMENT,
    GENRE_NAME CHARACTER VARYING(100) NOT NULL,
    CONSTRAINT GENRES_PK
        PRIMARY KEY (GENRE_ID)
);
CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID   INTEGER AUTO_INCREMENT,
    MPA_NAME CHARACTER VARYING(20) NOT NULL,
    CONSTRAINT MPA_PK
        PRIMARY KEY (MPA_ID)
);
CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID         INTEGER AUTO_INCREMENT,
    FILM_NAME       CHARACTER VARYING(30),
    DESCRIPTION     CHARACTER VARYING(200),
    RELEASE_DATE    DATE,
    DURATION        INTEGER,
    RATE            INTEGER,
    MPA_ID INTEGER,
    CONSTRAINT FILM_PK
        PRIMARY KEY (FILM_ID),
    CONSTRAINT MPA_ID_FK
        FOREIGN KEY (MPA_ID) REFERENCES MPA
);
CREATE TABLE IF NOT EXISTS FILM_GENRES
(
    FILM_ID       INTEGER NOT NULL,
    GENRE_ID      INTEGER NOT NULL,
    CONSTRAINT FILM_GENRES_PK
        PRIMARY KEY (FILM_ID, GENRE_ID),
    CONSTRAINT FILM_GENRES_FILM_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS,
    CONSTRAINT FILM_GENRES_GENRE_ID_FK
        FOREIGN KEY (GENRE_ID) REFERENCES GENRES
);

CREATE TABLE IF NOT EXISTS FRIEND_STATUSES
(
    FRIEND_STATUS_ID    INTEGER AUTO_INCREMENT,
    FRIEND_STATUS_NAME  CHARACTER VARYING(50) NOT NULL,
    CONSTRAINT FRIEND_STATUSES_PK
        PRIMARY KEY (FRIEND_STATUS_ID)
);
CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID   INTEGER AUTO_INCREMENT,
    EMAIL     CHARACTER VARYING(30) NOT NULL,
    LOGIN     CHARACTER VARYING(30) NOT NULL,
    USER_NAME CHARACTER VARYING(30) NOT NULL,
    BIRTHDAY  DATE                  NOT NULL,
    CONSTRAINT USERS_PK
        PRIMARY KEY (USER_ID)
);
CREATE TABLE IF NOT EXISTS FILM_LIKES
(
    FILM_ID INTEGER,
    USER_ID INTEGER,
    CONSTRAINT FILM_LIKES_PK
        PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT FILM_LIKES_FILM_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS,
    CONSTRAINT FILM_LIKES_USER_ID_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS
);
CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID          INTEGER,
    FRIEND_ID        INTEGER,
    FRIEND_STATUS_ID INTEGER,
    CONSTRAINT FRIENDSHIP_PK
        primary key (USER_ID, FRIEND_ID),
    CONSTRAINT FRIENDSHIP_USER_ID_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS,
    CONSTRAINT FRIENDSHIP_FRIEND_ID_FK
        FOREIGN KEY (FRIEND_ID) REFERENCES USERS,
    CONSTRAINT FRIENDSHIP_FRIEND_STATUS_ID_FK
        FOREIGN KEY (FRIEND_STATUS_ID) REFERENCES FRIEND_STATUSES
);




